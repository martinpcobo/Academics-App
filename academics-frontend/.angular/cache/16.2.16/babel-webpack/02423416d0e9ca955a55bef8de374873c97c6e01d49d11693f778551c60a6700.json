{"ast":null,"code":"import _asyncToGenerator from \"/Users/martin.perez.cobo/Documents/Repositories/Academics-FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport AuthenticationService from \"../../../services/AuthenticationService\";\nimport { Grade } from \"../../../../models/Grade\";\nimport StudentService from \"./StudentService\";\nimport ClassService from \"./ClassService\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../controllers/GradeController\";\nexport default class GradeService {\n  constructor(grade_controller, authentication_service, student_service, class_service) {\n    this.grade_controller = grade_controller;\n    this.authentication_service = authentication_service;\n    this.student_service = student_service;\n    this.class_service = class_service;\n  }\n  // ! Business Logic\n  // * Get Grades from Course\n  getGradesFromCourse(course_id) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.grade_controller.getGradesFromCourse(course_id, _this.authentication_service.getToken()).subscribe({\n          next: function () {\n            var _ref = _asyncToGenerator(function* (grade_obj_list) {\n              let grade_instances = [];\n              for (let grade_obj of grade_obj_list) {\n                console.log(grade_obj);\n                let grade_instance = new Grade(grade_obj);\n                grade_instance.setStudent(yield _this.student_service.getStudent(grade_obj.student));\n                grade_instance.setValue(grade_obj.value);\n                grade_instance.setClass(yield _this.class_service.getClassById(grade_obj.course));\n                grade_instances.push(grade_instance);\n              }\n              resolve(grade_instances);\n            });\n            return function next(_x) {\n              return _ref.apply(this, arguments);\n            };\n          }(),\n          error: error => {\n            reject(error);\n          }\n        });\n      });\n    })();\n  }\n  // * Get Grades from Student\n  getGradesFromStudent(student_id) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.grade_controller.getGradesFromStudent(student_id, _this2.authentication_service.getToken()).subscribe({\n          next: function () {\n            var _ref2 = _asyncToGenerator(function* (grade_obj_list) {\n              let grade_instances = [];\n              for (let grade_obj of grade_obj_list) {\n                let grade_instance = new Grade(grade_obj);\n                grade_instance.setStudent(undefined);\n                grade_instance.setValue(grade_obj.value);\n                grade_instance.setClass(yield _this2.class_service.getClassById(grade_obj.course));\n                grade_instances.push(grade_instance);\n              }\n              resolve(grade_instances);\n            });\n            return function next(_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }(),\n          error: error => {\n            reject(error);\n          }\n        });\n      });\n    })();\n  }\n  // * Get Grade by Id\n  getGradeById(grade_id) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this3.grade_controller.getGradeById(grade_id, _this3.authentication_service.getToken()).subscribe({\n          next: function () {\n            var _ref3 = _asyncToGenerator(function* (grade_obj) {\n              let grade_instance = new Grade(grade_obj);\n              grade_instance.setStudent(yield _this3.student_service.getStudent(grade_obj.student));\n              grade_instance.setValue(grade_obj.value);\n              grade_instance.setClass(yield _this3.class_service.getClassById(grade_obj.course));\n              resolve(grade_instance);\n            });\n            return function next(_x3) {\n              return _ref3.apply(this, arguments);\n            };\n          }(),\n          error: error => {\n            reject(error);\n          }\n        });\n      });\n    })();\n  }\n  // * Create Grade\n  createGrade(grade) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      grade.getStudent()?.setUser(undefined);\n      return new Promise((resolve, reject) => {\n        _this4.grade_controller.createGrade(grade, _this4.authentication_service.getToken()).subscribe({\n          next: () => {\n            resolve(true);\n          },\n          error: error => {\n            reject(false);\n          }\n        });\n      });\n    })();\n  }\n  // * Delete Grade By Id\n  deleteGradeById(grade_id) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this5.grade_controller.deleteGradeById(grade_id, _this5.authentication_service.getToken()).subscribe({\n          next: () => {\n            resolve(true);\n          },\n          error: error => {\n            reject(false);\n          }\n        });\n      });\n    })();\n  }\n  static {\n    this.ɵfac = function GradeService_Factory(t) {\n      return new (t || GradeService)(i0.ɵɵinject(i1.GradeController), i0.ɵɵinject(AuthenticationService), i0.ɵɵinject(StudentService), i0.ɵɵinject(ClassService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GradeService,\n      factory: GradeService.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["AuthenticationService","Grade","StudentService","ClassService","GradeService","constructor","grade_controller","authentication_service","student_service","class_service","getGradesFromCourse","course_id","_this","_asyncToGenerator","Promise","resolve","reject","getToken","subscribe","next","_ref","grade_obj_list","grade_instances","grade_obj","console","log","grade_instance","setStudent","getStudent","student","setValue","value","setClass","getClassById","course","push","_x","apply","arguments","error","getGradesFromStudent","student_id","_this2","_ref2","undefined","_x2","getGradeById","grade_id","_this3","_ref3","_x3","createGrade","grade","_this4","setUser","deleteGradeById","_this5","i0","ɵɵinject","i1","GradeController","factory","ɵfac"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-FrontEnd/src/app/modules/dashboard/services/GradeService.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport AuthenticationService from \"../../../services/AuthenticationService\";\nimport {Grade} from \"../../../../models/Grade\";\nimport StudentService from \"./StudentService\";\nimport {GradeController} from \"../controllers/GradeController\";\nimport ClassService from \"./ClassService\";\n\n@Injectable()\nexport default class GradeService {\n  constructor(\n    private grade_controller: GradeController,\n    private authentication_service: AuthenticationService,\n    private student_service: StudentService,\n    private class_service: ClassService,\n  ) {\n  }\n\n  // ! Business Logic\n\n  // * Get Grades from Course\n  public async getGradesFromCourse(course_id: String): Promise<Grade[] | undefined> {\n    return new Promise<Grade[]>((resolve, reject) => {\n      this.grade_controller.getGradesFromCourse(course_id, this.authentication_service.getToken()).subscribe({\n        next: async (grade_obj_list: any[]) => {\n          let grade_instances: Grade[] = [];\n          for (let grade_obj of grade_obj_list) {\n            console.log(grade_obj);\n            let grade_instance: Grade = new Grade(grade_obj);\n            grade_instance.setStudent(await this.student_service.getStudent(grade_obj.student));\n            grade_instance.setValue(grade_obj.value);\n            grade_instance.setClass(await this.class_service.getClassById(grade_obj.course));\n            grade_instances.push(grade_instance);\n          }\n\n          resolve(grade_instances);\n        }, error: (error: any) => {\n          reject(error);\n        }\n      })\n    });\n  }\n\n  // * Get Grades from Student\n  public async getGradesFromStudent(student_id: String): Promise<Grade[]> {\n    return new Promise<Grade[]>((resolve, reject) => {\n      this.grade_controller.getGradesFromStudent(student_id, this.authentication_service.getToken()).subscribe({\n        next: async (grade_obj_list: any[]) => {\n          let grade_instances: Grade[] = [];\n          for (let grade_obj of grade_obj_list) {\n            let grade_instance: Grade = new Grade(grade_obj);\n            grade_instance.setStudent(undefined);\n            grade_instance.setValue(grade_obj.value);\n            grade_instance.setClass(await this.class_service.getClassById(grade_obj.course));\n            grade_instances.push(grade_instance);\n          }\n\n          resolve(grade_instances);\n        }, error: (error: any) => {\n          reject(error);\n        }\n      })\n    });\n  }\n\n  // * Get Grade by Id\n  public async getGradeById(grade_id: String): Promise<Grade> {\n    return new Promise<Grade>((resolve, reject) => {\n      this.grade_controller.getGradeById(grade_id, this.authentication_service.getToken()).subscribe({\n        next: async (grade_obj: any) => {\n          let grade_instance: Grade = new Grade(grade_obj);\n          grade_instance.setStudent(await this.student_service.getStudent(grade_obj.student));\n          grade_instance.setValue(grade_obj.value);\n          grade_instance.setClass(await this.class_service.getClassById(grade_obj.course));\n          resolve(grade_instance);\n        }, error: (error: any) => {\n          reject(error);\n        }\n      })\n    });\n  }\n\n  // * Create Grade\n  public async createGrade(grade: Grade): Promise<boolean> {\n    grade.getStudent()?.setUser(undefined);\n    return new Promise<boolean>((resolve, reject) => {\n      this.grade_controller.createGrade(grade, this.authentication_service.getToken()).subscribe({\n        next: () => {\n          resolve(true);\n        }, error: (error: any) => {\n          reject(false);\n        }\n      });\n    });\n  }\n\n  // * Delete Grade By Id\n  public async deleteGradeById(grade_id: String): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      this.grade_controller.deleteGradeById(grade_id, this.authentication_service.getToken()).subscribe({\n        next: () => {\n          resolve(true);\n        }, error: (error: any) => {\n          reject(false);\n        }\n      });\n    });\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}