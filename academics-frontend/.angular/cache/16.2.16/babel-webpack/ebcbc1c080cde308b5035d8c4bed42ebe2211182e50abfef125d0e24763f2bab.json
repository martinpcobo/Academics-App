{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GradeController {\n  // ! Constructors\n  constructor(http) {\n    this.http = http;\n    // ! Attributes\n    this.server_url = 'http://localhost:8080/api/grade';\n  }\n  // ! Endpoints\n  // * Get Grades from Course\n  getGradesFromCourse(course_id, token) {\n    return this.http.get(this.server_url + '/course/' + course_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n  }\n  // * Get Grade by Id\n  getGradeById(grade_id, token) {\n    return this.http.get(this.server_url + '/' + grade_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n  }\n  // * Get Grades from Student\n  getGradesFromStudent(student_id, token) {\n    return this.http.get(this.server_url + '/student/' + student_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n  }\n  // * Create Grade\n  createGrade(grade, token) {\n    return this.http.post(this.server_url + '/', grade, {\n      headers: {\n        'Authorization': 'Bearer ' + token,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  // * Delete Grade\n  deleteGradeById(grade_id, token) {\n    return this.http.delete(this.server_url + '/' + grade_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      },\n      responseType: 'text'\n    });\n  }\n  static {\n    this.ɵfac = function GradeController_Factory(t) {\n      return new (t || GradeController)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GradeController,\n      factory: GradeController.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["GradeController","constructor","http","server_url","getGradesFromCourse","course_id","token","get","headers","getGradeById","grade_id","getGradesFromStudent","student_id","createGrade","grade","post","deleteGradeById","delete","responseType","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-App/academics-frontend/src/app/modules/dashboard/controllers/GradeController.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {Subject} from \"../../../../models/Subject\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Grade} from \"../../../../models/Grade\";\n\n@Injectable()\nexport class GradeController {\n  // ! Attributes\n  private server_url: String = 'http://localhost:8080/api/grade';\n\n  // ! Constructors\n  constructor(private http: HttpClient) {\n  }\n\n  // ! Endpoints\n\n  // * Get Grades from Course\n  public getGradesFromCourse(course_id: String, token: String | null): Observable<Grade[]> {\n    return this.http.get<Grade[]>(this.server_url + '/course/' + course_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n  }\n\n  // * Get Grade by Id\n  public getGradeById(grade_id: String, token: String | null): Observable<Grade> {\n    return this.http.get<Grade>(this.server_url + '/' + grade_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n  }\n\n  // * Get Grades from Student\n  public getGradesFromStudent(student_id: String, token: String | null): Observable<Grade[]> {\n    return this.http.get<Grade[]>(this.server_url + '/student/' + student_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n  }\n\n  // * Create Grade\n  public createGrade(grade: Grade, token: String | null): Observable<Grade> {\n    return this.http.post<Grade>(this.server_url + '/', grade, {\n      headers: {\n        'Authorization': 'Bearer ' + token,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // * Delete Grade\n  public deleteGradeById(grade_id: String, token: String | null): Observable<String> {\n    return this.http.delete(this.server_url + '/' + grade_id, {\n      headers: {\n        'Authorization': 'Bearer ' + token,\n      },\n      responseType: 'text'\n    });\n  }\n\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,eAAe;EAI1B;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB;IACQ,KAAAC,UAAU,GAAW,iCAAiC;EAI9D;EAEA;EAEA;EACOC,mBAAmBA,CAACC,SAAiB,EAAEC,KAAoB;IAChE,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,UAAU,GAAG,UAAU,GAAGE,SAAS,EAAE;MACtEG,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAGF;;KAEhC,CAAC;EACJ;EAEA;EACOG,YAAYA,CAACC,QAAgB,EAAEJ,KAAoB;IACxD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,IAAI,CAACJ,UAAU,GAAG,GAAG,GAAGO,QAAQ,EAAE;MAC5DF,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAGF;;KAEhC,CAAC;EACJ;EAEA;EACOK,oBAAoBA,CAACC,UAAkB,EAAEN,KAAoB;IAClE,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,IAAI,CAACJ,UAAU,GAAG,WAAW,GAAGS,UAAU,EAAE;MACxEJ,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAGF;;KAEhC,CAAC;EACJ;EAEA;EACOO,WAAWA,CAACC,KAAY,EAAER,KAAoB;IACnD,OAAO,IAAI,CAACJ,IAAI,CAACa,IAAI,CAAQ,IAAI,CAACZ,UAAU,GAAG,GAAG,EAAEW,KAAK,EAAE;MACzDN,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAGF,KAAK;QAClC,cAAc,EAAE;;KAEnB,CAAC;EACJ;EAEA;EACOU,eAAeA,CAACN,QAAgB,EAAEJ,KAAoB;IAC3D,OAAO,IAAI,CAACJ,IAAI,CAACe,MAAM,CAAC,IAAI,CAACd,UAAU,GAAG,GAAG,GAAGO,QAAQ,EAAE;MACxDF,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAGF;OAC9B;MACDY,YAAY,EAAE;KACf,CAAC;EACJ;;;uBAvDWlB,eAAe,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAftB,eAAe;MAAAuB,OAAA,EAAfvB,eAAe,CAAAwB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}