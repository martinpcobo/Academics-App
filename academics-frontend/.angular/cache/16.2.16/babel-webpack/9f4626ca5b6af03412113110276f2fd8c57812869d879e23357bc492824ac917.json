{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport default class ThemeService {\n  constructor() {\n    this.theme = EThemeOptions.DARK_THEME;\n    this.theme_subj = new Subject();\n    this.theme_subscriber = this.theme_subj.asObservable();\n    let theme = localStorage.getItem('theme');\n    if (theme) {\n      this.theme = parseInt(theme);\n    }\n  }\n  setTheme(theme_option) {\n    this.theme = theme_option;\n    this.theme_subj.next(theme_option);\n    localStorage.setItem('theme', theme_option.toString());\n  }\n  getTheme() {\n    return this.theme;\n  }\n  getThemeObserver() {\n    return this.theme_subscriber;\n  }\n  getThemeCSSClass() {\n    if (this.theme == EThemeOptions.DARK_THEME) return 'dark-theme';\n    return 'light-theme';\n  }\n  static {\n    this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac\n    });\n  }\n}\nexport var EThemeOptions;\n(function (EThemeOptions) {\n  EThemeOptions[EThemeOptions[\"LIGHT_THEME\"] = 0] = \"LIGHT_THEME\";\n  EThemeOptions[EThemeOptions[\"DARK_THEME\"] = 1] = \"DARK_THEME\";\n})(EThemeOptions || (EThemeOptions = {}));","map":{"version":3,"names":["Subject","ThemeService","constructor","theme","EThemeOptions","DARK_THEME","theme_subj","theme_subscriber","asObservable","localStorage","getItem","parseInt","setTheme","theme_option","next","setItem","toString","getTheme","getThemeObserver","getThemeCSSClass","factory","ɵfac"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-App/academics-frontend/src/app/services/ThemeService.ts"],"sourcesContent":["import {Injectable, OnInit} from \"@angular/core\";\nimport {Observable, Subject} from \"rxjs\";\n\n@Injectable()\nexport default class ThemeService {\n  private theme: EThemeOptions = EThemeOptions.DARK_THEME;\n  private theme_subj: Subject<EThemeOptions> = new Subject<EThemeOptions>();\n  public theme_subscriber: Observable<EThemeOptions> = this.theme_subj.asObservable();\n\n  constructor() {\n    let theme: string | null = localStorage.getItem('theme');\n    if (theme) {\n      this.theme = parseInt(theme);\n    }\n  }\n\n  public setTheme(theme_option: EThemeOptions): void {\n    this.theme = theme_option;\n    this.theme_subj.next(theme_option);\n    localStorage.setItem('theme', theme_option.toString());\n  }\n\n  public getTheme(): EThemeOptions {\n    return this.theme;\n  }\n\n  public getThemeObserver(): Observable<EThemeOptions> {\n    return this.theme_subscriber;\n  }\n\n  public getThemeCSSClass(): string {\n    if (this.theme == EThemeOptions.DARK_THEME) return 'dark-theme';\n\n    return 'light-theme';\n  }\n}\n\nexport enum EThemeOptions {\n  LIGHT_THEME,\n  DARK_THEME\n}\n"],"mappings":"AACA,SAAoBA,OAAO,QAAO,MAAM;;AAGxC,eAAc,MAAOC,YAAY;EAK/BC,YAAA;IAJQ,KAAAC,KAAK,GAAkBC,aAAa,CAACC,UAAU;IAC/C,KAAAC,UAAU,GAA2B,IAAIN,OAAO,EAAiB;IAClE,KAAAO,gBAAgB,GAA8B,IAAI,CAACD,UAAU,CAACE,YAAY,EAAE;IAGjF,IAAIL,KAAK,GAAkBM,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACxD,IAAIP,KAAK,EAAE;MACT,IAAI,CAACA,KAAK,GAAGQ,QAAQ,CAACR,KAAK,CAAC;;EAEhC;EAEOS,QAAQA,CAACC,YAA2B;IACzC,IAAI,CAACV,KAAK,GAAGU,YAAY;IACzB,IAAI,CAACP,UAAU,CAACQ,IAAI,CAACD,YAAY,CAAC;IAClCJ,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEF,YAAY,CAACG,QAAQ,EAAE,CAAC;EACxD;EAEOC,QAAQA,CAAA;IACb,OAAO,IAAI,CAACd,KAAK;EACnB;EAEOe,gBAAgBA,CAAA;IACrB,OAAO,IAAI,CAACX,gBAAgB;EAC9B;EAEOY,gBAAgBA,CAAA;IACrB,IAAI,IAAI,CAAChB,KAAK,IAAIC,aAAa,CAACC,UAAU,EAAE,OAAO,YAAY;IAE/D,OAAO,aAAa;EACtB;;;uBA9BmBJ,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAmB,OAAA,EAAZnB,YAAY,CAAAoB;IAAA;EAAA;;AAiCjC,WAAYjB,aAGX;AAHD,WAAYA,aAAa;EACvBA,aAAA,CAAAA,aAAA,oCAAW;EACXA,aAAA,CAAAA,aAAA,kCAAU;AACZ,CAAC,EAHWA,aAAa,KAAbA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}