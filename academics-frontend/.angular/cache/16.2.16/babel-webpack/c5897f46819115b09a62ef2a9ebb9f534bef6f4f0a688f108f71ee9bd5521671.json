{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport default class AuthenticatorController {\n  // ! Constructor\n  constructor(http) {\n    this.http = http;\n    // ! Attributes\n    this.server_url = 'http://localhost:8080';\n  }\n  // ! Authenticator Routes\n  // * Get User's Authenticators\n  getAuthenticatorsFromUser(user_id, token) {\n    return this.http.get(this.server_url + '/api/auth/authenticator/' + user_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  // * Get Authenticator by ID\n  getAuthenticatorById(authenticator_id, user_id, token) {\n    return this.http.get(this.server_url + '/api/auth/authenticator/' + user_id + '/' + authenticator_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  // * Get Autheticator Count\n  getAuthenticatorCountByUsername(username) {\n    return this.http.get(this.server_url + '/api/auth/authenticator/' + username + '/count', {\n      responseType: undefined\n    });\n  }\n  // * Modify the Name of an Authenticator\n  modifyAuthenticatorName(authenticator_id, user_id, name, token) {\n    return this.http.put(this.server_url + '/api/auth/authenticator/' + user_id + '/' + authenticator_id, name, {\n      responseType: \"text\",\n      observe: \"body\",\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  // * Remove an Authenticator from a User\n  removeAuthenticator(authenticator_id, user_id, token) {\n    return this.http.delete(this.server_url + '/api/auth/authenticator/' + user_id + '/' + authenticator_id, {\n      responseType: \"text\",\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AuthenticatorController_Factory(t) {\n      return new (t || AuthenticatorController)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticatorController,\n      factory: AuthenticatorController.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["AuthenticatorController","constructor","http","server_url","getAuthenticatorsFromUser","user_id","token","get","headers","getAuthenticatorById","authenticator_id","getAuthenticatorCountByUsername","username","responseType","undefined","modifyAuthenticatorName","name","put","observe","removeAuthenticator","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-App/academics-frontend/src/app/controllers/AuthenticatorController.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport Authenticator from \"../../models/Authenticator\";\n\n@Injectable()\nexport default class AuthenticatorController {\n  // ! Attributes\n  private server_url: String = 'http://localhost:8080';\n\n  // ! Constructor\n  public constructor(private http: HttpClient) {\n  }\n\n  // ! Authenticator Routes\n  // * Get User's Authenticators\n  public getAuthenticatorsFromUser(user_id: String, token: String): Observable<Authenticator[]> {\n    return this.http.get<Authenticator[]>(this.server_url + '/api/auth/authenticator/' + user_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n\n  // * Get Authenticator by ID\n  public getAuthenticatorById(authenticator_id: String, user_id: String, token: String): Observable<Authenticator> {\n    return this.http.get<Authenticator>(this.server_url + '/api/auth/authenticator/' + user_id + '/' + authenticator_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n\n  // * Get Autheticator Count\n  public getAuthenticatorCountByUsername(username: String): Observable<Number> {\n    return this.http.get<Number>(this.server_url + '/api/auth/authenticator/' + username + '/count', {\n      responseType: undefined,\n    });\n  }\n\n  // * Modify the Name of an Authenticator\n  public modifyAuthenticatorName(authenticator_id: String, user_id: String, name: String, token: String): Observable<any> {\n    return this.http.put(this.server_url + '/api/auth/authenticator/' + user_id + '/' + authenticator_id, name, {\n      responseType: \"text\",\n      observe: \"body\",\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n\n  // * Remove an Authenticator from a User\n  public removeAuthenticator(authenticator_id: String, user_id: String, token: String): Observable<any> {\n    return this.http.delete(this.server_url + '/api/auth/authenticator/' + user_id + '/' + authenticator_id, {\n      responseType: \"text\",\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n}\n"],"mappings":";;AAMA,eAAc,MAAOA,uBAAuB;EAI1C;EACAC,YAA2BC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJ/B;IACQ,KAAAC,UAAU,GAAW,uBAAuB;EAIpD;EAEA;EACA;EACOC,yBAAyBA,CAACC,OAAe,EAAEC,KAAa;IAC7D,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAkB,IAAI,CAACJ,UAAU,GAAG,0BAA0B,GAAGE,OAAO,EAAE;MAC5FG,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;EAEA;EACOG,oBAAoBA,CAACC,gBAAwB,EAAEL,OAAe,EAAEC,KAAa;IAClF,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAgB,IAAI,CAACJ,UAAU,GAAG,0BAA0B,GAAGE,OAAO,GAAG,GAAG,GAAGK,gBAAgB,EAAE;MACnHF,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;EAEA;EACOK,+BAA+BA,CAACC,QAAgB;IACrD,OAAO,IAAI,CAACV,IAAI,CAACK,GAAG,CAAS,IAAI,CAACJ,UAAU,GAAG,0BAA0B,GAAGS,QAAQ,GAAG,QAAQ,EAAE;MAC/FC,YAAY,EAAEC;KACf,CAAC;EACJ;EAEA;EACOC,uBAAuBA,CAACL,gBAAwB,EAAEL,OAAe,EAAEW,IAAY,EAAEV,KAAa;IACnG,OAAO,IAAI,CAACJ,IAAI,CAACe,GAAG,CAAC,IAAI,CAACd,UAAU,GAAG,0BAA0B,GAAGE,OAAO,GAAG,GAAG,GAAGK,gBAAgB,EAAEM,IAAI,EAAE;MAC1GH,YAAY,EAAE,MAAM;MACpBK,OAAO,EAAE,MAAM;MACfV,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;EAEA;EACOa,mBAAmBA,CAACT,gBAAwB,EAAEL,OAAe,EAAEC,KAAa;IACjF,OAAO,IAAI,CAACJ,IAAI,CAACkB,MAAM,CAAC,IAAI,CAACjB,UAAU,GAAG,0BAA0B,GAAGE,OAAO,GAAG,GAAG,GAAGK,gBAAgB,EAAE;MACvGG,YAAY,EAAE,MAAM;MACpBL,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;;;uBArDmBN,uBAAuB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAvBxB,uBAAuB;MAAAyB,OAAA,EAAvBzB,uBAAuB,CAAA0B;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}