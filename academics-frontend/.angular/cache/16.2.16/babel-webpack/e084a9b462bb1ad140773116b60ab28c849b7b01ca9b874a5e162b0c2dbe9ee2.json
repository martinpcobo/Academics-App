{"ast":null,"code":"import _asyncToGenerator from \"/Users/martin.perez.cobo/Documents/Repositories/Academics-App/academics-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport AuthenticatorController from \"../controllers/AuthenticatorController\";\nimport Authenticator from \"../../models/Authenticator\";\nimport ToastService, { ToastType } from \"./ToastService\";\nimport AuthenticationService from \"./AuthenticationService\";\nimport * as i0 from \"@angular/core\";\n// Define the service as injectable and include the AuthenticationController provider\nexport default class AuthenticatorService {\n  constructor(authenticator_controller, authentication_service, toast_service) {\n    this.authenticator_controller = authenticator_controller;\n    this.authentication_service = authentication_service;\n    this.toast_service = toast_service;\n  }\n  // ! Business Logic\n  // * Authenticators Exist\n  userHasAuthenticators(username) {\n    var _this = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        let token = yield _this.authentication_service.getToken();\n        _this.authenticator_controller.getAuthenticatorCountByUsername(username).subscribe({\n          next: res => {\n            resolve(res.valueOf() > 0);\n          },\n          error: error => {\n            resolve(false);\n          }\n        });\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  // * Get Authenticators\n  getAuthenticatorsFromUser(user_id) {\n    var _this2 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n        let token = yield _this2.authentication_service.getToken();\n        if (token) {\n          _this2.authenticator_controller.getAuthenticatorsFromUser(user_id, token).subscribe({\n            next: res => {\n              console.log(res);\n              resolve(res.map(auth_instance => {\n                return new Authenticator(auth_instance);\n              }));\n            },\n            error: error => {\n              resolve([]);\n            }\n          });\n        } else {\n          console.log(\"Could not perform this operation, user is not logged in.\");\n        }\n      });\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  // * Delete Authenticator\n  removeAuthenticator(authenticator_id, user_id) {\n    var _this3 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n        let token = yield _this3.authentication_service.getToken();\n        if (token) {\n          _this3.authenticator_controller.removeAuthenticator(authenticator_id, user_id, token).subscribe({\n            next: res => {\n              _this3.toast_service.setMessage(\"Authenticator deleted successfully\", ToastType.SUCCESS);\n              resolve(true);\n            },\n            error: error => {\n              _this3.toast_service.setMessage(\"Failed to delete authenticator\", ToastType.DANGER);\n              resolve(false);\n            }\n          });\n        } else {\n          console.log(\"Could not perform this operation, user is not logged in.\");\n        }\n      });\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  // * Rename Authenticator\n  modifyAuthenticatorName(authenticator_id, user_id, new_name) {\n    var _this4 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n        let token = yield _this4.authentication_service.getToken();\n        if (token) {\n          _this4.authenticator_controller.modifyAuthenticatorName(authenticator_id, user_id, new_name, token).subscribe({\n            next: res => {\n              _this4.toast_service.setMessage(\"Authenticator renamed successfully\", ToastType.SUCCESS);\n              resolve(true);\n            },\n            error: error => {\n              _this4.toast_service.setMessage(\"Failed to rename authenticator\", ToastType.DANGER);\n              resolve(false);\n            }\n          });\n        } else {\n          console.log(\"Could not perform this operation, user is not logged in.\");\n        }\n      });\n      return function (_x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  }\n  static {\n    this.ɵfac = function AuthenticatorService_Factory(t) {\n      return new (t || AuthenticatorService)(i0.ɵɵinject(AuthenticatorController), i0.ɵɵinject(AuthenticationService), i0.ɵɵinject(ToastService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticatorService,\n      factory: AuthenticatorService.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["AuthenticatorController","Authenticator","ToastService","ToastType","AuthenticationService","AuthenticatorService","constructor","authenticator_controller","authentication_service","toast_service","userHasAuthenticators","username","_this","Promise","_ref","_asyncToGenerator","resolve","reject","token","getToken","getAuthenticatorCountByUsername","subscribe","next","res","valueOf","error","_x","_x2","apply","arguments","getAuthenticatorsFromUser","user_id","_this2","_ref2","console","log","map","auth_instance","_x3","_x4","removeAuthenticator","authenticator_id","_this3","_ref3","setMessage","SUCCESS","DANGER","_x5","_x6","modifyAuthenticatorName","new_name","_this4","_ref4","_x7","_x8","i0","ɵɵinject","factory","ɵfac"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-App/academics-frontend/src/app/services/AuthenticatorService.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport AuthenticatorController from \"../controllers/AuthenticatorController\";\nimport Authenticator from \"../../models/Authenticator\";\nimport ToastService, {ToastType} from \"./ToastService\";\nimport AuthenticationService from \"./AuthenticationService\";\n\n// Define the service as injectable and include the AuthenticationController provider\n@Injectable()\nexport default class AuthenticatorService {\n\n  constructor(\n    private authenticator_controller: AuthenticatorController,\n    private authentication_service: AuthenticationService,\n    private toast_service: ToastService\n  ) {\n  }\n\n  // ! Business Logic\n  // * Authenticators Exist\n  public userHasAuthenticators(username: String): Promise<boolean> {\n    return new Promise<boolean>(async (resolve, reject) => {\n      let token: String | null = await this.authentication_service.getToken();\n      this.authenticator_controller.getAuthenticatorCountByUsername(username).subscribe({\n        next: (res: Number) => {\n          resolve(res.valueOf() > 0);\n        },\n        error: (error) => {\n          resolve(false);\n        },\n      });\n    });\n  }\n\n  // * Get Authenticators\n  public getAuthenticatorsFromUser(user_id: String): Promise<Authenticator[]> {\n    return new Promise<Authenticator[]>(async (resolve, reject) => {\n      let token: String | null = await this.authentication_service.getToken();\n      if (token) {\n        this.authenticator_controller.getAuthenticatorsFromUser(user_id, token).subscribe({\n          next: (res: Object[]) => {\n            console.log(res);\n            resolve(res.map((auth_instance: Object) => {\n              return new Authenticator(auth_instance as Authenticator);\n            }));\n          },\n          error: (error) => {\n            resolve([]);\n          },\n        });\n      } else {\n        console.log(\"Could not perform this operation, user is not logged in.\");\n      }\n    });\n  }\n\n  // * Delete Authenticator\n  public removeAuthenticator(authenticator_id: String, user_id: String): Promise<boolean> {\n    return new Promise<boolean>(async (resolve, reject) => {\n      let token: String | null = await this.authentication_service.getToken();\n      if (token) {\n        this.authenticator_controller.removeAuthenticator(authenticator_id, user_id, token).subscribe({\n          next: (res: any) => {\n            this.toast_service.setMessage(\"Authenticator deleted successfully\", ToastType.SUCCESS)\n            resolve(true);\n          },\n          error: (error) => {\n            this.toast_service.setMessage(\"Failed to delete authenticator\" , ToastType.DANGER)\n            resolve(false);\n          },\n        });\n      } else {\n        console.log(\"Could not perform this operation, user is not logged in.\");\n      }\n    });\n  }\n\n  // * Rename Authenticator\n  public modifyAuthenticatorName(authenticator_id: String, user_id: String, new_name: String): Promise<boolean> {\n    return new Promise<boolean>(async (resolve, reject) => {\n      let token: String | null = await this.authentication_service.getToken();\n      if (token) {\n        this.authenticator_controller.modifyAuthenticatorName(authenticator_id, user_id, new_name, token).subscribe({\n          next: (res: any) => {\n            this.toast_service.setMessage(\"Authenticator renamed successfully\", ToastType.SUCCESS)\n            resolve(true);\n          },\n          error: (error) => {\n            this.toast_service.setMessage(\"Failed to rename authenticator\", ToastType.DANGER)\n            resolve(false);\n          },\n        });\n      } else {\n        console.log(\"Could not perform this operation, user is not logged in.\");\n      }\n    });\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}