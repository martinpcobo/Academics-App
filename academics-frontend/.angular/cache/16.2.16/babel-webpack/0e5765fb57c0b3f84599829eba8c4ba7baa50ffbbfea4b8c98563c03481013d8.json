{"ast":null,"code":"import _asyncToGenerator from \"/Users/martin.perez.cobo/Documents/Repositories/Academics-FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport User from \"../../models/User\";\nimport ToastService, { ToastType } from \"./ToastService\";\nimport AuthenticationController from \"../controllers/AuthenticationController\";\nimport * as WebAuthn from \"@github/webauthn-json\";\nimport { HttpStatusCode } from \"@angular/common/http\";\nimport UserController from \"../controllers/UserController\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport default class AuthenticationService {\n  constructor(toast_service, auth_controller, router, jwtHelper, user_controller) {\n    this.toast_service = toast_service;\n    this.auth_controller = auth_controller;\n    this.router = router;\n    this.jwtHelper = jwtHelper;\n    this.user_controller = user_controller;\n    this.component_toast_subject = \"Authentication\";\n    this.user = null;\n    this.user_subj = new Subject();\n    this.userObserver = this.user_subj.asObservable();\n    this.token = null;\n    this.token_subj = new Subject();\n    this.tokenObserver = this.token_subj.asObservable();\n    this.retrieveToken();\n  }\n  // ! Methods\n  // * Getters\n  getUser() {\n    return this.user;\n  }\n  getUserObserver() {\n    return this.userObserver;\n  }\n  getToken() {\n    return this.token;\n  }\n  getTokenObserver() {\n    return this.tokenObserver;\n  }\n  // * Setters\n  setUser(user) {\n    this.user = user;\n    this.user_subj.next(user);\n  }\n  setToken(token) {\n    if (token) {\n      localStorage.setItem('token', token.toString());\n    } else {\n      localStorage.removeItem('token');\n    }\n    this.token = token;\n    this.token_subj.next(token);\n  }\n  // ! Business Logic\n  // * Auth-Type Agnostic Methods\n  retrieveToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const token = localStorage.getItem('token');\n      if (token) {\n        _this.toast_service.setMessage(\"Retrieving user information\", ToastType.INFO);\n        if (yield _this.retrieveUserInformation(token)) {\n          _this.setToken(token);\n          if (_this.router.url.includes('login')) {\n            _this.router.navigate(['home']);\n          }\n        } else {\n          _this.setToken(null);\n          localStorage.removeItem('token');\n        }\n      }\n      return _this.getToken() != null;\n    })();\n  }\n  logout() {\n    this.setUser(null);\n    this.setToken(null);\n    this.router.navigate(['/login']).then(() => {\n      this.toast_service.setMessage(\"Logged out successfully\", ToastType.SUCCESS);\n    });\n  }\n  retrieveUserInformation(token) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let user_info = yield new Promise((resolve, reject) => {\n        _this2.user_controller.getUserById(_this2.jwtHelper.decodeToken(token).id, token).subscribe({\n          next: res => {\n            resolve(new User(res));\n          },\n          error: err => {\n            resolve(null);\n          }\n        });\n      });\n      _this2.setUser(user_info);\n      return user_info !== null;\n    })();\n  }\n  // * Password-Based Methods\n  authenticatePassword(credentials) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this3.auth_controller.authenticatePassword(credentials).subscribe({\n          next: function () {\n            var _ref = _asyncToGenerator(function* (res) {\n              _this3.setToken(res.toString());\n              if (!(yield _this3.retrieveUserInformation(res.toString()))) {\n                _this3.setToken(null);\n                _this3.setUser(null);\n                _this3.toast_service.setMessage(\"Could not retrieve the user's information\", ToastType.DANGER);\n                resolve(false);\n              } else {\n                _this3.toast_service.setMessage(\"Logged in successfully\", ToastType.SUCCESS);\n                resolve(true);\n              }\n            });\n            return function next(_x) {\n              return _ref.apply(this, arguments);\n            };\n          }(),\n          error: err => {\n            if (err.status === 503 /* HttpStatusCode.ServiceUnavailable */) {\n              _this3.toast_service.setMessage(\"Service unavailable\", ToastType.WARNING);\n            } else {\n              _this3.toast_service.setMessage(\"Invalid Credentials\", ToastType.WARNING);\n            }\n            resolve(false);\n          }\n        });\n      });\n    })();\n  }\n  // Change Password\n  changePassword(old_password, new_password) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        let user_id = _this4.user?.getIdentifier();\n        if (_this4.user && _this4.token && user_id) {\n          _this4.auth_controller.changePassword(user_id, old_password, new_password, _this4.token).subscribe({\n            next: function () {\n              var _ref2 = _asyncToGenerator(function* (res) {\n                _this4.setToken(null);\n                _this4.setUser(null);\n                _this4.router.navigate(['/login']).then(res => {\n                  _this4.toast_service.setMessage(\"Password changed successfully\", ToastType.SUCCESS);\n                  resolve(true);\n                });\n              });\n              return function next(_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }(),\n            error: err => {\n              if (err.status === 503 /* HttpStatusCode.ServiceUnavailable */) {\n                _this4.toast_service.setMessage(\"Service unavailable\", ToastType.WARNING);\n              } else {\n                _this4.toast_service.setMessage(\"Could not change password\", ToastType.WARNING);\n              }\n              resolve(false);\n            }\n          });\n        } else {\n          console.log(\"Could not perform operation, user is not logged in.\");\n          resolve(false);\n        }\n      });\n    })();\n  }\n  // * WebAuthn-Based Methods\n  // Start WebAuthn Registration\n  startAuthnRegistration(credentials) {\n    var _this5 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n        _this5.auth_controller.startAuthnRegistration(credentials).subscribe({\n          next: function () {\n            var _ref4 = _asyncToGenerator(function* (res) {\n              try {\n                let public_key = yield WebAuthn.create(res);\n                credentials.setPublicKey(JSON.stringify(public_key));\n                resolve(yield _this5.endAuthnRegistration(credentials));\n              } catch (e) {\n                _this5.toast_service.setMessage(\"Could not register the new Passkeyc\", ToastType.DANGER);\n              }\n            });\n            return function next(_x5) {\n              return _ref4.apply(this, arguments);\n            };\n          }(),\n          error: res => {\n            _this5.toast_service.setMessage(\"Invalid Credentials\", ToastType.WARNING);\n          }\n        });\n      });\n      return function (_x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  // End WebAuthn Registration\n  endAuthnRegistration(credentials) {\n    var _this6 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (resolve, reject) {\n        _this6.auth_controller.endAuthnRegistration(credentials).subscribe({\n          next: res => {\n            _this6.setToken(res.toString());\n            resolve(true);\n          },\n          error: res => {\n            _this6.toast_service.setMessage(\"Invalid Credentials\", ToastType.WARNING);\n            resolve(false);\n          }\n        });\n      });\n      return function (_x6, _x7) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  }\n  // Start WebAuthn Login\n  startAuthnLogin(credentials) {\n    var _this7 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (resolve, reject) {\n        _this7.auth_controller.startAuthnLogin(credentials).subscribe({\n          next: function () {\n            var _ref7 = _asyncToGenerator(function* (res) {\n              try {\n                let public_key = yield WebAuthn.get(res);\n                credentials.setPublicKey(JSON.stringify(public_key));\n              } catch (e) {\n                _this7.toast_service.setMessage(\"Could not authenticate using Passkeys\", ToastType.DANGER);\n              }\n              resolve(yield _this7.endAuthnLogin(credentials));\n            });\n            return function next(_x10) {\n              return _ref7.apply(this, arguments);\n            };\n          }(),\n          error: err => {\n            if (err.status == 404 /* HttpStatusCode.NotFound */) {\n              _this7.toast_service.setMessage(\"You don't have a Passkey registered\", ToastType.WARNING);\n            } else if (err.status == 503 /* HttpStatusCode.ServiceUnavailable */) {\n              _this7.toast_service.setMessage(\"Service Unavailable\", ToastType.DANGER);\n            } else {\n              _this7.toast_service.setMessage(\"Could not authenticate using Passkeys\", ToastType.DANGER);\n            }\n            resolve(false);\n          }\n        });\n      });\n      return function (_x8, _x9) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n  // End WebAuthn Login\n  endAuthnLogin(credentials) {\n    var _this8 = this;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(function* (resolve, reject) {\n        _this8.auth_controller.endAuthnLogin(credentials).subscribe({\n          next: function () {\n            var _ref9 = _asyncToGenerator(function* (token) {\n              if (!(yield _this8.retrieveUserInformation(token.toString()))) {\n                _this8.setToken(null);\n                _this8.setUser(null);\n                _this8.toast_service.setMessage(\"Could not retrieve the user's information\", ToastType.DANGER);\n                resolve(false);\n              } else {\n                _this8.setToken(token);\n                _this8.toast_service.setMessage(\"Logged in successfully\", ToastType.SUCCESS);\n                resolve(true);\n              }\n            });\n            return function next(_x13) {\n              return _ref9.apply(this, arguments);\n            };\n          }(),\n          error: err => {\n            if (err.status == 503 /* HttpStatusCode.ServiceUnavailable */) {\n              _this8.toast_service.setMessage(\"Service Unavailable\", ToastType.DANGER);\n            } else {\n              _this8.toast_service.setMessage(\"Could not authenticate using Passkeys\", ToastType.DANGER);\n            }\n            resolve(false);\n          }\n        });\n      });\n      return function (_x11, _x12) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  }\n  static {\n    this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(ToastService), i0.ɵɵinject(AuthenticationController), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(UserController));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["User","ToastService","ToastType","AuthenticationController","WebAuthn","HttpStatusCode","UserController","Subject","AuthenticationService","constructor","toast_service","auth_controller","router","jwtHelper","user_controller","component_toast_subject","user","user_subj","userObserver","asObservable","token","token_subj","tokenObserver","retrieveToken","getUser","getUserObserver","getToken","getTokenObserver","setUser","next","setToken","localStorage","setItem","toString","removeItem","_this","_asyncToGenerator","getItem","setMessage","INFO","retrieveUserInformation","url","includes","navigate","logout","then","SUCCESS","_this2","user_info","Promise","resolve","reject","getUserById","decodeToken","id","subscribe","res","error","err","authenticatePassword","credentials","_this3","_ref","DANGER","_x","apply","arguments","status","WARNING","changePassword","old_password","new_password","_this4","user_id","getIdentifier","_ref2","_x2","console","log","startAuthnRegistration","_this5","_ref3","_ref4","public_key","create","setPublicKey","JSON","stringify","endAuthnRegistration","e","_x5","_x3","_x4","_this6","_ref5","_x6","_x7","startAuthnLogin","_this7","_ref6","_ref7","get","endAuthnLogin","_x10","_x8","_x9","_this8","_ref8","_ref9","_x13","_x11","_x12","i0","ɵɵinject","i1","Router","i2","JwtHelperService","factory","ɵfac","providedIn"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-FrontEnd/src/app/services/AuthenticationService.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport User from \"../../models/User\";\nimport {Router} from \"@angular/router\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\nimport ToastService, {ToastType} from \"./ToastService\";\nimport AuthenticationController, {WebAuthnLoginResponse} from \"../controllers/AuthenticationController\";\nimport AuthLoginDetails from \"../../models/dtos/AuthLoginDetails\";\nimport * as WebAuthn from \"@github/webauthn-json\";\nimport {CredentialCreationOptionsJSON, PublicKeyCredentialWithAttestationJSON} from \"@github/webauthn-json\";\nimport {HttpErrorResponse, HttpStatusCode} from \"@angular/common/http\";\nimport UserController from \"../controllers/UserController\";\nimport {Observable, Subject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport default class AuthenticationService {\n  private component_toast_subject: String = \"Authentication\";\n\n  private user: User | null = null;\n\n  private user_subj: Subject<User | null> = new Subject<User | null>();\n  private userObserver: Observable<User | null> = this.user_subj.asObservable();\n\n  private token: String | null = null;\n  private token_subj: Subject<String | null> = new Subject<String | null>();\n  private tokenObserver: Observable<String | null> = this.token_subj.asObservable();\n\n  constructor(private toast_service: ToastService, private auth_controller: AuthenticationController, private router: Router, private jwtHelper: JwtHelperService, private user_controller: UserController) {\n    this.retrieveToken();\n  }\n\n  // ! Methods\n  // * Getters\n  public getUser(): User | null {\n    return this.user;\n  }\n\n  public getUserObserver(): Observable<User | null> {\n    return this.userObserver;\n  }\n\n  public getToken(): String | null {\n    return this.token;\n  }\n\n  public getTokenObserver(): Observable<String | null> {\n    return this.tokenObserver;\n  }\n\n  // * Setters\n  private setUser(user: User | null) {\n    this.user = user;\n    this.user_subj.next(user);\n  }\n\n  private setToken(token: String | null) {\n    if (token) {\n      localStorage.setItem('token', token.toString());\n    } else {\n      localStorage.removeItem('token');\n    }\n    this.token = token;\n    this.token_subj.next(token);\n  }\n\n  // ! Business Logic\n\n  // * Auth-Type Agnostic Methods\n\n  public async retrieveToken(): Promise<boolean> {\n    const token: string | null = localStorage.getItem('token');\n    if (token) {\n      this.toast_service.setMessage(\"Retrieving user information\", ToastType.INFO);\n      if (await this.retrieveUserInformation(token)) {\n        this.setToken(token);\n        if (this.router.url.includes('login')) {\n          this.router.navigate(['home']);\n        }\n      } else {\n        this.setToken(null);\n        localStorage.removeItem('token');\n      }\n    }\n\n    return this.getToken() != null;\n  }\n\n  public logout(): void {\n    this.setUser(null);\n    this.setToken(null);\n\n    this.router.navigate(['/login']).then(() => {\n      this.toast_service.setMessage(\"Logged out successfully\", ToastType.SUCCESS);\n    });\n  }\n\n  public async retrieveUserInformation(token: string): Promise<boolean> {\n    let user_info: User | null = await new Promise<User | null>(\n      (resolve, reject) => {\n        this.user_controller.getUserById(this.jwtHelper.decodeToken(token).id, token).subscribe({\n          next: (res: Object) => {\n            resolve(new User(res as User));\n          }, error: (err: HttpErrorResponse) => {\n            resolve(null);\n          }\n        });\n      }\n    );\n\n    this.setUser(user_info);\n\n    return user_info !== null;\n  }\n\n  // * Password-Based Methods\n  public async authenticatePassword(credentials: AuthLoginDetails): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      this.auth_controller.authenticatePassword(credentials).subscribe({\n        next: async (res) => {\n          this.setToken(res.toString());\n\n          if (!await this.retrieveUserInformation(res.toString())) {\n            this.setToken(null);\n            this.setUser(null);\n            this.toast_service.setMessage(\"Could not retrieve the user's information\", ToastType.DANGER)\n            resolve(false);\n          } else {\n            this.toast_service.setMessage(\"Logged in successfully\", ToastType.SUCCESS);\n            resolve(true);\n          }\n        },\n        error: (err: HttpErrorResponse) => {\n          if (err.status === HttpStatusCode.ServiceUnavailable) {\n            this.toast_service.setMessage(\"Service unavailable\", ToastType.WARNING);\n          } else {\n            this.toast_service.setMessage(\"Invalid Credentials\", ToastType.WARNING);\n          }\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  // Change Password\n  public async changePassword(old_password: String, new_password: String): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      let user_id: String | undefined = this.user?.getIdentifier();\n      if (this.user && this.token && user_id) {\n\n        this.auth_controller.changePassword(user_id, old_password, new_password, this.token).subscribe({\n          next: async (res) => {\n            this.setToken(null);\n            this.setUser(null);\n\n            this.router.navigate(['/login']).then((res) => {\n              this.toast_service.setMessage(\"Password changed successfully\", ToastType.SUCCESS)\n              resolve(true);\n            });\n          },\n          error: (err: HttpErrorResponse) => {\n            if (err.status === HttpStatusCode.ServiceUnavailable) {\n              this.toast_service.setMessage(\"Service unavailable\", ToastType.WARNING);\n            } else {\n              this.toast_service.setMessage(\"Could not change password\", ToastType.WARNING);\n            }\n            resolve(false);\n          }\n\n        });\n      } else {\n        console.log(\"Could not perform operation, user is not logged in.\");\n        resolve(false);\n      }\n    });\n  }\n\n  // * WebAuthn-Based Methods\n\n  // Start WebAuthn Registration\n  public startAuthnRegistration(credentials: AuthLoginDetails): Promise<boolean> {\n    return new Promise<boolean>(async (resolve, reject) => {\n      this.auth_controller.startAuthnRegistration(credentials).subscribe({\n        next: async (res: Object) => {\n          try {\n            let public_key: PublicKeyCredentialWithAttestationJSON = await WebAuthn.create(res as CredentialCreationOptionsJSON);\n\n            credentials.setPublicKey(JSON.stringify(public_key));\n\n            resolve(await this.endAuthnRegistration(credentials));\n          } catch (e) {\n            this.toast_service.setMessage(\"Could not register the new Passkeyc\", ToastType.DANGER);\n          }\n        },\n        error: (res) => {\n          this.toast_service.setMessage(\"Invalid Credentials\", ToastType.WARNING);\n        }\n      });\n    });\n  }\n\n  // End WebAuthn Registration\n  public endAuthnRegistration(credentials: AuthLoginDetails): Promise<boolean> {\n    return new Promise<boolean>(async (resolve, reject) => {\n      this.auth_controller.endAuthnRegistration(credentials).subscribe({\n        next: (res) => {\n          this.setToken(res.toString());\n          resolve(true);\n        },\n        error: (res) => {\n          this.toast_service.setMessage(\"Invalid Credentials\", ToastType.WARNING);\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  // Start WebAuthn Login\n  public startAuthnLogin(credentials: AuthLoginDetails): Promise<boolean> {\n    return new Promise(async (resolve, reject): Promise<void> => {\n      this.auth_controller.startAuthnLogin(credentials).subscribe({\n        next: async (res: WebAuthnLoginResponse) => {\n          try {\n            let public_key: WebAuthn.PublicKeyCredentialWithAssertionJSON = await WebAuthn.get(res);\n            credentials.setPublicKey(JSON.stringify(public_key));\n          } catch (e) {\n            this.toast_service.setMessage(\"Could not authenticate using Passkeys\", ToastType.DANGER);\n          }\n\n          resolve(await this.endAuthnLogin(credentials));\n        },\n        error: (err: HttpErrorResponse) => {\n          if (err.status == HttpStatusCode.NotFound) {\n            this.toast_service.setMessage(\"You don't have a Passkey registered\", ToastType.WARNING);\n          } else if (err.status == HttpStatusCode.ServiceUnavailable) {\n            this.toast_service.setMessage(\"Service Unavailable\", ToastType.DANGER);\n          } else {\n            this.toast_service.setMessage(\"Could not authenticate using Passkeys\", ToastType.DANGER);\n          }\n          resolve(false);\n        }\n      });\n    })\n  }\n\n  // End WebAuthn Login\n  public endAuthnLogin(credentials: AuthLoginDetails): Promise<boolean> {\n    return new Promise(\n      async (resolve, reject): Promise<void> => {\n        this.auth_controller.endAuthnLogin(credentials).subscribe({\n          next: async (token: String) => {\n            if (!await this.retrieveUserInformation(token.toString())) {\n              this.setToken(null);\n              this.setUser(null);\n              this.toast_service.setMessage(\"Could not retrieve the user's information\", ToastType.DANGER);\n              resolve(false);\n            } else {\n              this.setToken(token);\n              this.toast_service.setMessage(\"Logged in successfully\", ToastType.SUCCESS);\n              resolve(true);\n            }\n          },\n          error: (err: HttpErrorResponse) => {\n            if (err.status == HttpStatusCode.ServiceUnavailable) {\n              this.toast_service.setMessage(\"Service Unavailable\", ToastType.DANGER);\n            } else {\n              this.toast_service.setMessage(\"Could not authenticate using Passkeys\", ToastType.DANGER);\n            }\n            resolve(false);\n          }\n        });\n      }\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}