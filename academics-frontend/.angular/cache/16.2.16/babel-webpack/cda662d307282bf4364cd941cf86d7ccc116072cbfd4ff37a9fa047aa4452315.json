{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentController {\n  // ! Constructors\n  constructor(http) {\n    this.http = http;\n    // ! Attributes\n    this.server_url = 'http://localhost:8080';\n  }\n  // ! Endpoints\n  // * Create Student Profile\n  createStudentProfile(user_id, token) {\n    return this.http.post(this.server_url + '/api/student/' + user_id, {}, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  // * Delete Student Profile\n  deleteStudentProfile(user_id, token) {\n    return this.http.delete(this.server_url + '/api/student/' + user_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      },\n      responseType: 'text'\n    });\n  }\n  // * Get all Students\n  getAllStudents(token) {\n    return this.http.get(this.server_url + '/api/student/', {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  // * Subscribe a Student\n  subscribeStudent(user_id, token) {\n    return this.http.post(this.server_url + '/api/Student/' + user_id, {}, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  // * Unsubscribe a Student\n  unsubscribeStudent(user_id, token) {\n    return this.http.delete(this.server_url + '/api/student/' + user_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      },\n      responseType: 'text'\n    });\n  }\n  // * Get a Student\n  getStudent(student_id, token) {\n    return this.http.get(this.server_url + '/api/student/' + student_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token\n      }\n    });\n  }\n  static {\n    this.ɵfac = function StudentController_Factory(t) {\n      return new (t || StudentController)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentController,\n      factory: StudentController.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["StudentController","constructor","http","server_url","createStudentProfile","user_id","token","post","headers","deleteStudentProfile","delete","responseType","getAllStudents","get","subscribeStudent","unsubscribeStudent","getStudent","student_id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["/Users/martin.perez.cobo/Documents/Repositories/Academics-FrontEnd/src/app/modules/dashboard/controllers/StudentController.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Student} from \"../../../../models/Student\";\n\n@Injectable()\nexport class StudentController {\n  // ! Attributes\n  private server_url: String = 'http://localhost:8080';\n\n  // ! Constructors\n  constructor(private http: HttpClient) {\n  }\n\n  // ! Endpoints\n\n  // * Create Student Profile\n  public createStudentProfile(user_id: String, token: String | null): Observable<Student> {\n    return this.http.post<Student>(this.server_url + '/api/student/' + user_id, {}, {\n      headers: {\n        'Authentication': 'Bearer ' + token,\n      }\n    });\n  }\n\n  // * Delete Student Profile\n  public deleteStudentProfile(user_id: String, token: String | null): Observable<String> {\n    return this.http.delete(this.server_url + '/api/student/' + user_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token,\n      },\n      responseType: 'text',\n    });\n  }\n\n  // * Get all Students\n  public getAllStudents(token: String | null): Observable<Student[]> {\n    return this.http.get<Student[]>(this.server_url + '/api/student/', {\n      headers: {\n        'Authentication': 'Bearer ' + token,\n      }\n    });\n  }\n\n  // * Subscribe a Student\n  public subscribeStudent(user_id: String, token: String | null): Observable<Student> {\n    return this.http.post<Student>(this.server_url + '/api/Student/' + user_id, {}, {\n      headers: {\n        'Authentication': 'Bearer ' + token,\n      }\n    });\n  }\n\n  // * Unsubscribe a Student\n  public unsubscribeStudent(user_id: String, token: String | null): Observable<String> {\n    return this.http.delete(this.server_url + '/api/student/' + user_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token,\n      },\n      responseType: 'text',\n    });\n  }\n\n  // * Get a Student\n  public getStudent(student_id: String, token: String | null): Observable<Student> {\n    return this.http.get<Student>(this.server_url + '/api/student/' + student_id, {\n      headers: {\n        'Authentication': 'Bearer ' + token,\n      }\n    });\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,iBAAiB;EAI5B;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB;IACQ,KAAAC,UAAU,GAAW,uBAAuB;EAIpD;EAEA;EAEA;EACOC,oBAAoBA,CAACC,OAAe,EAAEC,KAAoB;IAC/D,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAU,IAAI,CAACJ,UAAU,GAAG,eAAe,GAAGE,OAAO,EAAE,EAAE,EAAE;MAC9EG,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;EAEA;EACOG,oBAAoBA,CAACJ,OAAe,EAAEC,KAAoB;IAC/D,OAAO,IAAI,CAACJ,IAAI,CAACQ,MAAM,CAAC,IAAI,CAACP,UAAU,GAAG,eAAe,GAAGE,OAAO,EAAE;MACnEG,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;OAC/B;MACDK,YAAY,EAAE;KACf,CAAC;EACJ;EAEA;EACOC,cAAcA,CAACN,KAAoB;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACW,GAAG,CAAY,IAAI,CAACV,UAAU,GAAG,eAAe,EAAE;MACjEK,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;EAEA;EACOQ,gBAAgBA,CAACT,OAAe,EAAEC,KAAoB;IAC3D,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAU,IAAI,CAACJ,UAAU,GAAG,eAAe,GAAGE,OAAO,EAAE,EAAE,EAAE;MAC9EG,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;EAEA;EACOS,kBAAkBA,CAACV,OAAe,EAAEC,KAAoB;IAC7D,OAAO,IAAI,CAACJ,IAAI,CAACQ,MAAM,CAAC,IAAI,CAACP,UAAU,GAAG,eAAe,GAAGE,OAAO,EAAE;MACnEG,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;OAC/B;MACDK,YAAY,EAAE;KACf,CAAC;EACJ;EAEA;EACOK,UAAUA,CAACC,UAAkB,EAAEX,KAAoB;IACxD,OAAO,IAAI,CAACJ,IAAI,CAACW,GAAG,CAAU,IAAI,CAACV,UAAU,GAAG,eAAe,GAAGc,UAAU,EAAE;MAC5ET,OAAO,EAAE;QACP,gBAAgB,EAAE,SAAS,GAAGF;;KAEjC,CAAC;EACJ;;;uBAhEWN,iBAAiB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAjBrB,iBAAiB;MAAAsB,OAAA,EAAjBtB,iBAAiB,CAAAuB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}